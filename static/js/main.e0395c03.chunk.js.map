{"version":3,"sources":["styles.js","Sheet.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["Sheet","styled","div","Header","Input","input","NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","getColumnName","index","String","fromCharCode","charCodeAt","useState","data","setData","setCellValue","useCallback","row","column","value","newData","computeCell","cellContent","charAt","expression","substr","split","subStitutedExpression","forEach","item","test","toUpperCase","eval","error","Array","fill","map","m","i","key","n","j","columnName","rowIndex","columnIndex","currentValue","Cell","edit","setEdit","useMemo","handleChange","event","target","onBlur","onFocus","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e0395c03.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Sheet = styled.div`\n  display: grid;\n  grid-template-columns: 32px repeat(9, 90px);\n`;\n\nexport const Header = styled.div`\n  background: #ccc;\n  color: #282828;\n  padding: 4px;\n  text-align: center;\n`;\n\nexport const Input = styled.input`\n  padding: 0 4px;\n  :not(:focus) {\n    text-align: right;\n  }\n\n  :focus {\n    border: 1px solid #1581ba;\n    background-color: #e7f2f8;\n  }\n`;\n","import React, { useState, useCallback, Fragment } from \"react\";\n\nimport Cell from \"./Cell\";\nimport { Sheet as StyledSheet } from \"./styles\";\n\nconst NUMBER_OF_ROWS = 10;\nconst NUMBER_OF_COLUMNS = 10;\n\nconst getColumnName = index =>\n  String.fromCharCode(\"A\".charCodeAt(0) + index - 1);\n\nconst Sheet = () => {\n  const [data, setData] = useState({});\n\n  const setCellValue = useCallback(\n    ({ row, column, value }) => {\n      const newData = { ...data };\n\n      newData[`${column}${row}`] = value;\n      setData(newData);\n    },\n    [data, setData]\n  );\n\n  const computeCell = useCallback(\n    ({ row, column }) => {\n      const cellContent = data[`${column}${row}`];\n      if (cellContent) {\n        if (cellContent.charAt(0) === \"=\") {\n          // This regex converts = \"A1+A2\" to [\"A1\",\"+\",\"A2\"]\n          const expression = cellContent.substr(1).split(/([+*-])/g);\n\n          let subStitutedExpression = \"\";\n\n          expression.forEach(item => {\n            // Regex to test if it is of form alphabet followed by number ex: A1\n            if (/^[A-z][0-9]$/g.test(item || \"\")) {\n              subStitutedExpression += data[(item || \"\").toUpperCase()] || 0;\n            } else {\n              subStitutedExpression += item;\n            }\n          });\n\n          // @shame: Need to comeup with parser to replace eval and to support more expressions\n          try {\n            return eval(subStitutedExpression);\n          } catch (error) {\n            return \"ERROR!\";\n          }\n        }\n        return cellContent;\n      }\n      return \"\";\n    },\n    [data]\n  );\n\n  return (\n    <StyledSheet>\n      {Array(NUMBER_OF_ROWS)\n        .fill()\n        .map((m, i) => {\n          return (\n            <Fragment key={i}>\n              {Array(NUMBER_OF_COLUMNS)\n                .fill()\n                .map((n, j) => {\n                  const columnName = getColumnName(j);\n                  return (\n                    <Cell\n                      rowIndex={i}\n                      columnIndex={j}\n                      columnName={columnName}\n                      setCellValue={setCellValue}\n                      currentValue={data[`${columnName}${i}`]}\n                      computeCell={computeCell}\n                      key={`${columnName}${i}`}\n                    />\n                  );\n                })}\n            </Fragment>\n          );\n        })}\n    </StyledSheet>\n  );\n};\n\nexport default Sheet;\n","import React, { useCallback, useState, useMemo } from \"react\";\n\nimport { Input, Header } from \"./styles\";\n\nconst Cell = ({\n  rowIndex,\n  columnIndex,\n  columnName,\n  setCellValue,\n  computeCell,\n  currentValue\n}) => {\n  const [edit, setEdit] = useState(false);\n\n  const value = useMemo(() => {\n    if (edit) {\n      return currentValue || \"\";\n    }\n    return computeCell({ row: rowIndex, column: columnName });\n  }, [edit, currentValue, rowIndex, columnName, computeCell]);\n\n  const handleChange = useCallback(\n    event => {\n      setCellValue({\n        row: rowIndex,\n        column: columnName,\n        value: event.target.value\n      });\n    },\n    [rowIndex, columnName, setCellValue]\n  );\n\n  if (columnIndex === 0 && rowIndex === 0) {\n    return <Header />;\n  }\n\n  if (columnIndex === 0) {\n    return <Header>{rowIndex}</Header>;\n  }\n\n  if (rowIndex === 0) {\n    return <Header>{columnName}</Header>;\n  }\n\n  return (\n    <Input\n      onBlur={() => setEdit(false)}\n      onFocus={() => setEdit(true)}\n      value={value}\n      type=\"text\"\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default Cell;\n","import React from \"react\";\nimport { Reset } from \"styled-reset\";\n\nimport Sheet from \"./Sheet\";\n\nconst App = () => {\n  return (\n    <>\n      <Reset />\n      <Sheet />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}